# -*- coding: utf-8 -*-
"""Get all backteststoxx emails.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FTcZLwY6Ck_C7ZVa0kNpL1_CvoAPniRC
"""

APIKEY = "AIzaSyAhqYap1iK3t-DtOpTStvZALdfE3kCKgIk"
WEBCLIENTID = "914016029840-24qpupahd54i01jt8kfvalmj2114kbh9.apps.googleusercontent.com"

"""# Task
Set up Gmail API, extract emails labeled "backteststoxx", and print the first 10 lines of the first 10 relevant emails.

## Setup and authentication

### Subtask:
Install the necessary Google Client library and authenticate with the Gmail API. This typically involves enabling the Gmail API in the Google Cloud Console, creating credentials (like an OAuth 2.0 client ID), and downloading a credentials file.

**Reasoning**:
Install the Google Client library using pip.
"""

# Commented out IPython magic to ensure Python compatibility.
# %pip install google-api-python-client google-auth-httplib2 google-auth-oauthlib

"""**Reasoning**:
Load the credentials from the downloaded file and set up the authentication flow for the Gmail API.


"""

import os.path

from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError

# If modifying these scopes, delete the file token.json.
SCOPES = ["https://www.googleapis.com/auth/gmail.readonly"]

def authenticate_gmail_api():
    """Shows basic usage of the Gmail API.
    Lists the user's Gmail labels.
    """
    creds = None
    # The file token.json stores the user's access and refresh tokens, and is
    # created automatically when the authorization flow completes for the first
    # time.
    if os.path.exists("token.json"):
        creds = Credentials.from_authorized_user_file("token.json", SCOPES)
    # If there are no (valid) credentials available, let the user log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                "webcredentials.json", SCOPES
            )
            auth_url, _ = flow.authorization_url(prompt='consent')
            print(f'Please go to this URL: {auth_url}')
            code = input('Enter the authorization code: ')
            flow.fetch_token(code=code)
            creds = flow.credentials

        # Save the credentials for the next run
        with open("token.json", "w") as token:
            token.write(creds.to_json())

    try:
        # Call the Gmail API
        service = build("gmail", "v1", credentials=creds)
        results = service.users().labels().list(userId="me").execute()
        labels = results.get("labels", [])

        if not labels:
            print("No labels found.")
            return None
        print("Labels:")
        for label in labels:
            print(label["name"])
        return service

    except HttpError as error:
        # TODO(developer) - Handle errors from gmail API.
        print(f"An error occurred: {error}")
        return None

service = authenticate_gmail_api()

if service:
    print("\nGmail API authenticated successfully.")
else:
    print("\nGmail API authentication failed.")

"""## Build the service

### Subtask:
Use the authenticated credentials to build the Gmail API service object.

**Reasoning**:
Check if the service variable is None and print a message if it is.
"""